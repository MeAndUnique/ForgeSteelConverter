@page "/"
@using ForgeSteelConverter.Conversion
@using ForgeSteelConverter.Models
@using System.Text.Json
@using System.IO
@using System.Text

@inject IJSRuntime JS

<script>
    window.downloadFileFromStream = async (fileName, contentStreamReference) => {
      const arrayBuffer = await contentStreamReference.arrayBuffer();
      const blob = new Blob([arrayBuffer]);
      const url = URL.createObjectURL(blob);
      const anchorElement = document.createElement('a');
      anchorElement.href = url;
      anchorElement.download = fileName ?? '';
      anchorElement.click();
      anchorElement.remove();
      URL.revokeObjectURL(url);
    }
</script>

<PageTitle>Home</PageTitle>

<h1>Forge Steel Hero Class Data Converter</h1>

<p>Upload your ds-class export file here to get a baseline conversion of the TypeScript code for the class. This tool was designed to be feature-complete for the classes as they were presented in the original backer preview packet, and so there is a good chance that not everything will convert perfectly from the fully released version. As such please review the output carefully before submitting for inclusion with Forge Steel's codebase.</p>

<InputFile OnChange="LoadFile" />

@if (className is not null)
{
    <button @onclick="@(() => DownloadFile(className, classFile))">@className</button>
}

@foreach((string name, string file) in subclasses)
{
    <button @onclick="@(() => DownloadFile(name, file))">@name</button>
}

@code {
    private string className;

    private string classFile;

    private List<(string name, string file)> subclasses = new();

    private async Task LoadFile(InputFileChangeEventArgs eventArgs)
    {
        // This is generally poor practice, however the simplicity is nice for a purpose built app that is running locally.
        string contents = await new StreamReader(eventArgs.File.OpenReadStream()).ReadToEndAsync();
        HeroClass heroClass = JsonSerializer.Deserialize<HeroClass>(contents)!;
        (classFile, List<string> subclassFiles) = ClassConverter.ConvertHero(heroClass);
        className = ConversionHelpers.GetFileName(heroClass.name) + ".ts";

        subclasses.Clear();
        for (int index = 0; index < heroClass.subclasses.Length; index++)
        {
            Subclass? subclass = heroClass.subclasses[index];
            subclasses.Add((ConversionHelpers.GetFileName(subclass.name) + ".ts", subclassFiles[index]));
        }
    }

    private async Task DownloadFile(string name, string contents)
    {
        using MemoryStream stream = new(Encoding.Unicode.GetBytes(contents));
        using DotNetStreamReference streamReference = new(stream: stream);
        await JS.InvokeVoidAsync("downloadFileFromStream", name, streamReference);
    }
}